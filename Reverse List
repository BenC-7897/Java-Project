public ArrayList<T> asReverseOrderedList() { // Method to reverse the list of values in the BST 
    ArrayList<T> outcome = new ArrayList<>(); 
    asReverseOrderedList(root, outcome); 
    return outcome; 
}
private void asReverseOrderedList(Node<T> node, ArrayList<T> outcome) { // Helper method to traverse the BST in reverse order 
	if (node!=null) {
	asReverseOrderedList(node.right, outcome); // Traverse the right subtree first in reverse order 
	asReverseOrderedList(node.left, outcome); // Traverse the left subtree in reverse order 
        outcome.add(node.item); // Add the current node to the array list 
    }
}
public class BST_App {
	public static void main(String[] args) throws InterruptedException {
		DrawableBST bal_bst = new DrawableBST(); // Note: A drawable BST can only handle integer items
		int[] fullyBalancedTree = {40,20,60,15,25,50,70,10,20,65,75,17,22,27,45,55,8,12,16,18,21,23,26,28,44,46,54,56,64,66,74,76};
		for (int i=0; i<fullyBalancedTree.length; i++)
			bal_bst.insert(fullyBalancedTree[i]);
		bal_bst.draw();
		System.out.println(bal_bst.asReverseOrderedList()); 
	}
}

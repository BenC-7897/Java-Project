public T max() { 
	return max(root); 
}
private T max(Node<T> n) {
    if (n == null) {
    return null; 
}
    if (n.right==null) {
    return n.item; 
}
    return max(n.right);
}
import edu.princeton.cs.introcs.StdDraw;
public class BST_App {
	public static void main(String[] args) throws InterruptedException {
		DrawableBST bal_bst = new DrawableBST(); // Note: A drawable BST can only handle integer items
		int[] fullyBalancedTree = {40,20,60,15,25,50,70,10,20,65,75,17,22,27,45,55,8,12,16,18,21,23,26,28,44,46,54,56,64,66,74,76};
		for (int i=0; i<fullyBalancedTree.length; i++)
			bal_bst.insert(fullyBalancedTree[i]);
		bal_bst.draw();
  }
}
